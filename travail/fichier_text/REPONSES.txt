
Question 1.1:

	On a représenté nos Vecteurs avec un vector de double (notre seul attribut) qui possède une norme (et une norme au carré) et une dimension. On donne à l'utilisateur la possibilité d'afficher un Vecteur, d'augmenter sa dimension et d'accéder à ses composantes.

	 De plus, l'utilisateur peut aussi : verifier l'égalité de deux Vecteurs, obtenir l'opposé d'un Vecteur, additionner/soustraire deux Vecteurs, multiplier un Vecteur par un scalaire, effectuer le produit scalaire et vectoriel entre deux Vecteurs; il peut aussi normer un Vecteur à 1 (l'opérateur ~).
 
	Il est possible de construire un Vecteur de trois façons: en donnant une dimension (ce qui créerait donc le Vecteur nul de cette dimension), en fournissant une liste de composantes ou, pour un Vecteur de dimension 3, en citant (une à une) ces trois composantes. Toutes les méthodes de cette classe sont publiques sauf une méthode permettant de vérifier que deux Vecteurs ont la même dimension et une autre pour vérifier si un vecteur est quasi nul.

	Notre seul attribut étant privé, on donne seulement la possibilité à l'utilisateur d'accéder à ces composantes et non pas de les manipuler. En effet, ceci entrainerai de la mauvaise encapsulation (si l'utilisateur voulait changer les composantes d'un Vecteur, il pourrait s'y prendre en utilisant les opérations mathématiques fournit ou en construisant un nouveau Vecteur) et l'on trouve d'ailleurs que cette méthode de manipulation n'est pas nécessaire à la gestion d'autres objets (ex: Toupies).

	
		   



Question 1.2:
	
	Nous avons choisit de lancer une erreur si les vecteurs n'ont pas la même dimension car les autres choix sont erronés. En effet :

- choisir par convention que c'est la plus grande des deux dimensions qui détermine l'opération (plongement naturel de R^m dans R^n pour m < n): la logique de cette démarche serait de rajouter un certain nombre de 0 pour compenser les dimensions manquantes. Cependant, le choix des composantes dans lesquelles on rajoute les 0 est totalement arbitraire ( exemple: soit v1=(1,2) et v2=(1,2,3), augmenter v1 serait donc avoir v1=(0,1,2), (1,0,2) ou (1,2,0) ).

-choisir par convention que c'est la plus petite des deux dimensions qui détermine l'opération (projection): Encore une fois, on se retrouve dans une situation avec un arbitraire qui est de choisir l'axe sur lequel projeter.

-choisir que c'est le premier des deux opérandes qui fixe la dimension du résultat: Ceci supprimerait la commutativité de l'addition qui est une propriété intrinsèque d'un espace vectoriel. 



Question 4.1:

	Nous n'avons pas créé de constructeur de copie pour la classee Vecteur car cela nous paraissait inutile compte tenu du faite qu'il existe 
	deja un constructeur de copie par défaut géré par le compilateur et une copie de surface suffit pour des Vecteurs.


Question 4.2:
	
	a) au niveau des attributs, cela ne reviendrait à rien changer car les angles et la longueur étant des doubles, ils rentrent donc dans le cadre
	   du vector de double mit en place comme attribut de la classee Vecteur.

	b) Cependant, la difficulté majeur serait de différencier les opérations quand l'utilisateur voudra utiliser des coordonnées sphériques (en effet 
	   une addition, mulitplication, etc. ne se fait pas de la même manière lorsque l'on utilise les coordonnées cartésiennes ou sphériques). Une solution serait d'utiliser un 	   booléen pour différencier les deux système de coordonnées. Cependant, qu'adviendrait de l'ajout d'un Vecteur en coordonnées sphériques à un Vecteur en cordonnées 		   cartésiennes ? En effet, retourne-t-on un Vecteur en coordonnées cartésiennes ou sphériques ? Encore une fois le choix est arbitraire.


Question 4.3:

	Nous avons introduit:
				* operator==: compare deux vecteurs, regarde si ils sont de même dimension et ont les même composantes 
				
				* operator!=: opposé de l'operator==.

		   		* operator+=,-=,*=(interne).

		   		* operator-(interne /prends l'instance courante): retourne l'opposé du vecteur.
			
				* operator ~: retourne l'instance courante normé à 1.
	
				* operator^=: retourne le produit vectoriel entre deux vecteurs.

		   		* operator*(interne/ double en argument): retourne le produit d'un scalaire et d'un vecteur.

		  	 	* operator +,-,*,^(externe): permet la meme chose que operator +=,-=,*= et ^=
	  	 		  mais en prenant en arguments deux Vecteurs et retourne un Vecteur.

		   		* operator* (externe/scalaire en argument): permet la meme chose que l'operator *= (avec argument un scalaire) mais prends 
		 		  cette fois-ci en argument un scalaire et un vecteur.
	
		   		* operator<< (externe): utilise la méthode affiche.



Question 6.1: 

	Un ConeSimple est une Toupie donc elle hérite de la classe Toupie, elle aussi deux attributs supplémentaires (une hauteur et un rayon). De plus, les équations de mouvement sont plus spécifiques que dans le cas d'une Toupie générale (même si l'on retrouve les mêmes résultats dans les deux cas).



Question 7.1: 

	Nous avons conçu la classe Integrateur comme une classe abstraite contenant une méthode virtuelle pure permettant d'intégrer une Toupie d'un pas de temps.
Elle contient aussi d'autre méthode seulement utilisé auxiliairement par la classe Systeme (pour sa construction et son affichage).En général, un Integrateur n'a pas d'attribut, même si certaines de ces sous-classe en utiliseront.


Question 7.2: 

	La classe IntegrateurEulerCromer est un Integrateur donc on a choisit que la classe IntegrateurEulerCromer hérite de la classe Integrateur. De plus, on a concretement implémenté la méthode integre qui n'était pas définie pour la classe Integrateur en utilisant l'algorithme d'Euler-Cromer.


question 8.1:

	La méthode dessine est une méthode virtuelle pure de la classe SupportADessin (qui est donc abstraite), c'est donc une méthode polymorphique car elle sera utilisé par des sous-classes à travers l'utilisation des pointeurs.


Question 8.2:

	La classe système devra contenir une collection hétérogène de toupies, c'est à dire un tableau de pointeur sur des toupies. Ceci nous permettra d'utiliser le polymorphisme à travers les méthodes virtuelles de nos toupies. On pourrait donc garder une vue générale de notre système tout en ayant des opérations spécifiques à chacune de nos Toupies.


Question 8.3: 

	Il faut faire attentions à bien gérer la mémoire pour ne pas avoir des pointeurs qui ne pointent vers rien. Pour cela il existent deux solutions:
- la première étant d'utiliser des unique_ptr qui vont gérer eux-même la mémoire qu'ils allouent
- ou d'être certain de bien désallouer la mémoire une fois que l'objet pointé a été détruit.
On a choisit ici d'utiliser des unique_ptr car dans le cas de pointeurs à la C, il serait possible d'avoir deux systèmes différents pointant vers une même toupie.Alors, l'evolution de la toupie dans un système entrainerait sont évolution dans l'autre, ce qui est non voulu.


Question 8.4:

	la classe Systeme contient une collection hétérogène de Toupies et un pointeur sur un Integrateur. Le pointeur sur l'Integrateur (une classe abstraite) nous permet d'avoir un Integrateur global qui peut agir sur les différentes Toupies de notre Systeme. Nous avons choisis d'avoir notre Systeme qui pointe sur un Integrateur plutôt que les Toupies pointants vers un Integrateur car nous avons pensé qu'un Systeme devrait avoir qu'une seule façon de simuler les objets qu'il contient et que cela serait dénoué de sens physique d'avoir un Systeme qui est décrit de deux façons différentes simultanément. Cependant, nous avons décidé qu'un Systeme n'est pas un Dessinable (n'hérite pas de la classe Dessinable) car l'on voudrait conserver la possibilité de pouvoir afficher deux Toupie d'un seul Systeme en utilisant des SupportADessins différents. 


Question 11.1:

	Nous mettons ces méthodes dans la classe Toupie (dans Toupie.cc) car nous avons décidé que la classe Toupie représentera une toupie générale. Elle devra donc avoir toutes les méthodes permettant de simuler le fonctionnement d'une Toupie dans un cadre plus général.


Question 13.1:

	Nous pouvons changer d'intégrateur à partir de la classe système (avec une méthode implémentée) ce qui va changer la façon d'intégrer de toutes les toupies appartenant à ce système. Nous avons aussi implémenté un logiciel QCustomPlot permettant d'afficher des courbes correspondant à une Toupie intégré de façons différentes.

