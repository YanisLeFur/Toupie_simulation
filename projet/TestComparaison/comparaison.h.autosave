#ifndef COMPARAISON_H
#define COMPARAISON_H

#include <QMainWindow>

/*Ce Widget (séparé en deux sous widget) sert à l'affichage de nos graphs crées par QCustomPlot. 
 * Il n'est pas necessaire d'inclure les fichiers qcustomplot.h  dans nos fichier comparaison.h 
 * et comparaison.cc car ce widget "comparaison" a été promu QCustomPlot dans le fichier comparaison.ui
 * */



QT_BEGIN_NAMESPACE
namespace Ui { class Comparaison; }
QT_END_NAMESPACE

class Comparaison : public QMainWindow
{
    Q_OBJECT

public:
    Comparaison(QWidget *parent = nullptr);
    ~Comparaison();

    //suppprimer les données dans qv_x qv_y_cone qv_y_revolution
    void clearData();
    
    //fonction permettant de créer les graphs des valeurs demandé (fait majoritairement par QCustomPlot)
    void plot();
    
    //transmet les données collectées par le main jusqu'au QWidget
    void give_datas(QVector<double> time,QVector<double> qv_y_cone_psi,QVector<double> qv_y_revolution_psi,QVector<double> qv_y_cone_theta,
                    QVector<double> qv_y_revolution_theta,QVector<double> qv_y_cone_phi,QVector<double> qv_y_revolution_phi,
                    QVector<double> qv_y_cone_psi_point,QVector<double> qv_y_revolution_psi_point,QVector<double> qv_y_cone_theta_point,
                    QVector<double> qv_y_revolution_theta_point,QVector<double> qv_y_cone_phi_point,QVector<double> qv_y_revolution_phi_point);

private slots:

//gestion des boutons du Widget
    void on_button_psi_clicked();

    void on_button_theta_clicked();

    void on_button_phi_clicked();

    void on_button_psi_point_clicked();

    void on_button_theta_point_clicked();

    void on_button_phi_point_clicked();

    void on_button_clear_clicked();

private:

    Ui::Comparaison *ui;
    
//données à mettre en graphe------------------------------------------------------------
    QVector<double> qv_x;
    QVector<double> qv_y_cone;
    QVector<double> qv_y_revolution;
//--------------------------------------------------------------------------------------
  
    /*valeurs temporaires qui seront transmises aux données à mettre en graphe lorsque leur bouton respectif sera pressé 
     * cela permet la simplification de la méthode clear data et de pouvoir reutilise les valeur pour phi,theta...
     * et de ne pas les supprimer totalement du widget
     * */
    
    QVector<double> time_temp;

    QVector<double> qv_y_cone_psi;
    QVector<double> qv_y_revolution_psi;

    QVector<double> qv_y_cone_theta;
    QVector<double> qv_y_revolution_theta;

    QVector<double> qv_y_cone_phi;
    QVector<double> qv_y_revolution_phi;

    QVector<double> qv_y_cone_psi_point;
    QVector<double> qv_y_revolution_psi_point;

    QVector<double> qv_y_cone_theta_point;
    QVector<double> qv_y_revolution_theta_point;

    QVector<double> qv_y_cone_phi_point;
    QVector<double> qv_y_revolution_phi_point;

};
#endif // COMPARAISON_H
